name: Build

on:
  pull_request:
    branches:
      - master
    types: [opened, synchronize]
    paths-ignore:
      - 'config/**'
      - '**/*.md'
  push:
    # Build for the master branch.
    branches:
      - master
  release:
    # Publish released commit as Docker `latest` and `git_revision` images.
    types:
      - published
  workflow_dispatch:
    inputs:
      ref:
        description: 'Ref to build CLI [default: latest master; examples: v0.40.0, 0a4ff9d3e4a9ab432fd5812eb18c98e03b5a7432]'
        required: false
        default: ''
      push_image:
        description: 'Push images to DockerHub [default: false; examples: true, false]'
        required: false
        default: 'false'
      use_latest_tag:
        description: 'Use `latest` tag while pushing images to DockerHub [default: false; examples: true, false]'
        required: false
        default: 'false'

jobs:
  build_bins:
    name: Build
    runs-on: ${{matrix.os.name}}
    strategy:
      matrix:
        os: [{ name: ubuntu-22.04, bin-name: linux }, { name: macos-14, bin-name: darwin }] # { name: windows-2022, bin-name: windows }
        arch: [amd64, arm64]

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}
          # Allows to fetch all history for all branches and tags. Need this for proper versioning.
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: true

      - name: Build
        run: make
        env:
          GOARCH: ${{ matrix.arch }}

      - name: Rename binaries
        run: for i in ./bin/*; do mv $i $i-${{ matrix.os.bin-name }}-${{ matrix.arch }}${{ (matrix.os.bin-name == 'windows' && '.exe') || '' }}; done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Binaries ${{ matrix.os.bin-name }}-${{ matrix.arch }}
          path: ./bin/*
          if-no-files-found: error

      - name: Attach binaries to the release as assets
        if: ${{ github.event_name == 'release' }}
        run: gh release upload ${{ github.event.release.tag_name }} ./bin/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_images:
    needs: build_bins
    name: Build and push docker images
    runs-on: ubuntu-22.04
    if: ${{ github.event_name != 'pull_request' }}
    strategy:
      matrix:
        image: [adm, cli, ir, storage]

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: ${{ github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.push_image == 'true') }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set version
        id: setver
        run: echo version=`make version` >> $GITHUB_OUTPUT

      - name: Set latest tag
        id: setlatest
        if: ${{ (github.event_name == 'release' && github.event.release.target_commitish == 'master') || (github.event_name == 'workflow_dispatch' && github.event.inputs.use_latest_tag == 'true') }}
        run: echo "latest=,nspccdev/neofs-${{matrix.image}}:latest" >> $GITHUB_OUTPUT

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/Dockerfile.${{matrix.image}}
          push: ${{ github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.push_image == 'true') }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            REPO=github.com/${{ github.repository }}
            VERSION=${{ steps.setver.outputs.version }}
          tags: nspccdev/neofs-${{matrix.image}}:${{ steps.setver.outputs.version }}${{ steps.setlatest.outputs.latest }}
