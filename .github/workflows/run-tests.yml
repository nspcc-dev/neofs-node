name: Run automated system tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
      - support/**
    types: [opened, synchronize]
    paths-ignore:
      - '**/*.md'
    release:
      types:
        - published
    workflow_dispatch:
      inputs:
        neofs_node_ref:
          description: 'Neofs-node ref. Examples: v0.36.0, 8fdcc6d7e798e6511be8806b81894622e72d7fdc, branch_name]'
          required: false
          default: ''

permissions: write-all

jobs:
  run_system_tests:
    runs-on: ubuntu-latest
    timeout-minutes: 500
    steps:
      - name: Checkout neofs-testcases repository
        uses: actions/checkout@v3
        with:
          repository: vvarg229/neofs-testcases
          ref: 'timeout-fix'
          path: neofs-testcases

      - name: Checkout neofs-dev-env repository
        uses: actions/checkout@v3
        with:
          repository: vvarg229/neofs-dev-env
          ref: 'timeout-tests'
          path: neofs-dev-env

      - name: Checkout neofs-node repository
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.event.inputs.neofs_node_ref || github.head_ref || github.ref_name }}
          path: neofs-node

################################################################
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20
      - run: go version

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
      - run: python --version

# Hashlib uses OpenSSL for ripemd160 and apparently OpenSSL disabled some older crypto algos around version 3.0
# in November 2021. All the functions are still there but require manual enabling.
# See https://github.com/openssl/openssl/issues/16994
# But we use ripemd160 for tests.
# For ripemd160 to be supported, we need the openssl configuration file to contain the following lines:
# openssl_conf = openssl_init
#
# [openssl_init]
# providers = provider_sect
#
# [provider_sect]
# default = default_sect
# legacy = legacy_sect
#
# [default_sect]
# activate = 1
#
# [legacy_sect]
# activate = 1
      - name: Fix OpenSSL ripemd160
        run: |
          openssl version -a
          echo "Old openssl config"
          cat /usr/lib/ssl/openssl.cnf
          sudo python -c "
          filename = '/usr/lib/ssl/openssl.cnf'
          with open(filename, 'r') as file:
              lines = file.readlines()
          with open(filename, 'w') as file:
              in_provider_sect = False
              in_default_sect = False
              for line in lines:
                  if line.strip() == '#openssl_conf = openssl_init':
                      file.write('openssl_conf = openssl_init\n')
                  elif line.strip() == '[provider_sect]':
                      in_provider_sect = True
                      file.write(line)
                  elif in_provider_sect and line.strip() == 'default = default_sect':
                      file.write(line)
                      file.write('legacy = legacy_sect\n')
                      in_provider_sect = False
                  elif line.strip() == '[default_sect]':
                      in_default_sect = True
                      file.write(line)
                  elif in_default_sect and line.strip() == '# activate = 1':
                      file.write('activate = 1\n')
                      in_default_sect = False
                  else:
                      file.write(line)
              file.write('[legacy_sect]\n')
              file.write('activate = 1\n')
          "
          echo "New openssl config:"      
          cat /usr/lib/ssl/openssl.cnf

################################################################
      - name: Build neofs-node (neofs-cli and neofs-adm)
        timeout-minutes: 30
        run: |
          make docker/all
          echo "$(pwd)/bin" >> $GITHUB_PATH
        working-directory: neofs-node

################################################################
      - name: Get TAG for docker images
        run: |
          echo "CURRENT_TAG=$( make version | sed 's/^v//' )" >> $GITHUB_ENV
        working-directory: neofs-node

      - name: Build NeoFS storage docker image
        timeout-minutes: 30
        run: |
          make image-storage
        working-directory: neofs-node

      - name: Build NeoFS Inner Ring docker image
        timeout-minutes: 30
        run: |
          make image-ir
        working-directory: neofs-node

      - name: Add NeoFS storage and NeoFS ir docker TAGs to testcases-env config file
        run: |
          sed -i "s/NODE_VERSION=.*/NODE_VERSION=${{ env.CURRENT_TAG }}/g" .github/testcases-env
          sed -i "s/IR_VERSION=.*/IR_VERSION=${{ env.CURRENT_TAG }}/g" .github/testcases-env
        working-directory: neofs-node

################################################################
      - name: Copy testcases-env file to testcases-env in neofs-dev-env
        run: |
          cp .github/testcases-env ${GITHUB_WORKSPACE}/neofs-dev-env/.env
        working-directory: neofs-node

      - name: Prepare hosts
        timeout-minutes: 5
        run: |
          make get
          sudo ./bin/update_hosts.sh
        working-directory: neofs-dev-env

      - name: Prepare test environment
        timeout-minutes: 30
        run: |
          make prepare-test-env
          echo "$(pwd)/vendor" >> $GITHUB_PATH
        working-directory: neofs-dev-env

################################################################
      - name: Log environment
        run: |
          echo "Check free space"
          df -h
          df -h .
          df -h /home/runner/runners
          df -h ${GITHUB_WORKSPACE}
          echo "=========================================="

          echo "Check /etc/hosts"
          cat /etc/hosts
          echo "=========================================="

          echo "Check docker images"
          docker images
          echo "=========================================="

          echo "Check docker ps"
          docker ps
          echo "=========================================="

          echo "Check neo-go version"
          neo-go --version
          echo "=========================================="

          echo "Check neofs-s3-authmate version"
          neofs-s3-authmate --version
          echo "=========================================="

          echo "Check neofs-s3-gw version"
          echo "=========================================="
          neofs-s3-gw --version
          echo "=========================================="

          echo "Check neofs-adm version"
          neofs-adm --version
          echo "=========================================="

          echo "Check neofs-ir version"
          neofs-ir --version
          echo "=========================================="

          echo "Check neofs-lens version"
          neofs-lens --version
          echo "=========================================="

          echo "Check neofs-cli version"
          neofs-cli --version
          echo "=========================================="

          echo "Check vendor dir"
          ls -lah "${GITHUB_WORKSPACE}/neofs-dev-env/vendor"
          echo "=========================================="

          echo "Check bin dir"
          ls -lah "${GITHUB_WORKSPACE}/neofs-node/bin"
          echo "=========================================="
        working-directory: neofs-dev-env

################################################################
      - name: Prepare venv
        timeout-minutes: 30
        run: |
          make venv.local-pytest
        working-directory: neofs-testcases

      - name: Run Sanity tests for pull requests
        timeout-minutes: 500
        if: github.event_name == 'pull_request'
        run: |
          source venv.local-pytest/bin/activate && pytest --show-capture=no --alluredir=${GITHUB_WORKSPACE}/allure-results pytest_tests/testsuites
        working-directory: neofs-testcases

      - name: Run all tests for other events
        timeout-minutes: 480
        if: github.event_name != 'pull_request'
        run: |
          source venv.local-pytest/bin/activate && pytest --alluredir=${GITHUB_WORKSPACE}/allure-results pytest_tests/testsuites
        working-directory: neofs-testcases

      - name: Log environment
        if: always()
        run: |
          echo "Check free space"
          df -h
          df -h .
          df -h /home/runner/runners
          df -h ${GITHUB_WORKSPACE}
        working-directory: neofs-testcases

################################################################
      - name: Cleanup system tests environment
        timeout-minutes: 30
        if: always()
        run: |
          make clean
        working-directory: neofs-testcases

      - name: Cleanup dev-env environment
        timeout-minutes: 30
        if: always()
        run: |
          make down
          make clean
        working-directory: neofs-dev-env

################################################################
      - name: Get Allure history
        timeout-minutes: 60
        uses: actions/checkout@v3
        if: always()
        with:
          ref: gh-pages
          path: gh-pages

      - name: Log environment
        if: always()
        run: |
          echo "Check free space"
          df -h
          df -h .
          df -h /home/runner/runners
          df -h ${GITHUB_WORKSPACE}
        working-directory: neofs-testcases

      - name: Allure Report action from marketplace
        timeout-minutes: 60
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: allure-results
          allure_report: allure-report
          gh_pages: gh-pages
          allure_history: allure-history
          keep_reports: 10

      - name: Deploy report to Github Pages
        timeout-minutes: 120
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history

      - name: Post the link to the report
        timeout-minutes: 60
        if: always()
        uses: Sibz/github-status-action@v1
        with:
          authToken: ${{secrets.GITHUB_TOKEN}}
          context: 'Test report'
          state: 'success'
          sha: ${{github.event.pull_request.head.sha || github.sha}}
          target_url: https://${{ github.repository_owner }}.github.io/neofs-node/${{ github.run_number }}
